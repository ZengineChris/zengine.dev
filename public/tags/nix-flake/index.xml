<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nix-Flake on Zengine Dev</title>
    <link>http://localhost:1313/tags/nix-flake/</link>
    <description>Recent content in Nix-Flake on Zengine Dev</description>
    <image>
      <title>Zengine Dev</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jul 2024 21:57:54 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/nix-flake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up Ruby Development Environment with Nix Flakes</title>
      <link>http://localhost:1313/posts/ruby-on-rails-dev-env-with-nix/</link>
      <pubDate>Sat, 13 Jul 2024 21:57:54 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/ruby-on-rails-dev-env-with-nix/</guid>
      <description>Setting up a Ruby development environment can be challenging, especially when integrating with tools like Neovim and Ruby Language Server Protocol (LSP). Here&amp;rsquo;s a guide to streamline the process using Nix Flakes.
Step 1: Create the Nix Flake Configuration First, create a flake.nix file with the following content:
{ description = &amp;#34;Developer env for ruby&amp;#34;; inputs = { nixpkgs.url = &amp;#34;github:NixOS/nixpkgs/nixpkgs-unstable&amp;#34;; }; outputs = { self, nixpkgs }: let supportedSystems = [ &amp;#34;aarch64-darwin&amp;#34; &amp;#34;aarch64-linux&amp;#34; &amp;#34;x86_64-darwin&amp;#34; &amp;#34;x86_64-linux&amp;#34; ]; forAllSupportedSystems = f: nixpkgs.</description>
    </item>
    
  </channel>
</rss>
